arrange(p_rank)
return(customer_recs)
}
suppressWarnings(ensemble_recommender("411",
context_similarities = cs_2_indexedBy1,
no_context_similarities = customer_similarities1,
product_similarities = product_similarities1,
wide_customer_products_matrix = customer_products_bought_wide,
predicted_ratings = mf1_predicted))
# justify choosing "39263" for a top customers
order_items %>%
right_join(orders, by = "orders_id") %>%
count(customers_id) %>%
arrange(desc(n)) %>%
head()
# justify choosings "411" for a bottom customer
order_items %>%
right_join(orders, by = "orders_id") %>%
count(customers_id) %>%
arrange(n) %>%
head()
ensemble_recommender <- function(customer, context_similarities, no_context_similarities, product_similarities, wide_customer_products_matrix, predicted_ratings){
# Convert to character
customer <- ifelse(is.character(customer), customer, as.character(customer))
# Context containing similarity
rank_1 <- customer_based_recommendations(customer,
context_similarities,
wide_customer_products_matrix) %>%
mutate(p_rank = rank(-score)) %>%
select(product, p_rank)
# User bought similarity only
rank_2 <- customer_based_recommendations(customer,
no_context_similarities,
wide_customer_products_matrix) %>%
mutate(p_rank = rank(-score)) %>%
select(product, p_rank)
# Item similarity
rank_3 <- product_based_recommendations(customer,
product_similarities,
t(wide_customer_products_matrix)) %>%
mutate(p_rank = rank(-score)) %>%
select(product, p_rank)
# Matrix factorization
rank_4 <- data.frame(score = predicted_ratings[customer,]) %>%
rownames_to_column("product") %>%
mutate(p_rank = rank(-score)) %>%
select(product, p_rank)
# Combination of methods
customer_recs <- inner_join(inner_join(inner_join(rank_1, rank_2, by = "product"), rank_3, by = "product"), rank_4, by = "product") %>%
mutate(overall = p_rank.x + p_rank.y + p_rank.x.x + p_rank.y.y) %>%
select(product, overall) %>%
mutate(p_rank = rank(overall)) %>%
select(product, p_rank) %>%
arrange(p_rank)
return(customer_recs)
}
suppressWarnings(ensemble_recommender("29302",
context_similarities = cs_2_indexedBy1,
no_context_similarities = customer_similarities1,
product_similarities = product_similarities1,
wide_customer_products_matrix = customer_products_bought_wide,
predicted_ratings = mf1_predicted))
ensemble_recommender <- function(customer, context_similarities, no_context_similarities, product_similarities, wide_customer_products_matrix, predicted_ratings){
# Convert to character
customer <- ifelse(is.character(customer), customer, as.character(customer))
# Context containing similarity
rank_1 <- customer_based_recommendations(customer,
context_similarities,
wide_customer_products_matrix) %>%
mutate(p_rank = rank(-score)) %>%
select(product, p_rank)
# User bought similarity only
rank_2 <- customer_based_recommendations(customer,
no_context_similarities,
wide_customer_products_matrix) %>%
mutate(p_rank = rank(-score)) %>%
select(product, p_rank)
# Item similarity
rank_3 <- product_based_recommendations(customer,
product_similarities,
t(wide_customer_products_matrix)) %>%
mutate(p_rank = rank(-score)) %>%
select(product, p_rank)
# Matrix factorization
rank_4 <- data.frame(score = predicted_ratings[customer,]) %>%
rownames_to_column("product") %>%
mutate(p_rank = rank(-score)) %>%
select(product, p_rank)
# Combination of methods
customer_recs <- inner_join(inner_join(inner_join(rank_1, rank_2, by = "product"), rank_3, by = "product"), rank_4, by = "product") %>%
mutate(overall = p_rank.x + p_rank.y + p_rank.x.x + p_rank.y.y) %>%
select(product, overall) %>%
mutate(p_rank = rank(overall)) %>%
select(product, p_rank) %>%
arrange(p_rank)
return(customer_recs)
}
suppressWarnings(ensemble_recommender("65",
context_similarities = cs_2_indexedBy1,
no_context_similarities = customer_similarities1,
product_similarities = product_similarities1,
wide_customer_products_matrix = customer_products_bought_wide,
predicted_ratings = mf1_predicted))
ensemble_recommender <- function(customer, context_similarities, no_context_similarities, product_similarities, wide_customer_products_matrix, predicted_ratings){
# Convert to character
customer <- ifelse(is.character(customer), customer, as.character(customer))
# Context containing similarity
rank_1 <- customer_based_recommendations(customer,
context_similarities,
wide_customer_products_matrix) %>%
mutate(p_rank = rank(-score)) %>%
select(product, p_rank)
# User bought similarity only
rank_2 <- customer_based_recommendations(customer,
no_context_similarities,
wide_customer_products_matrix) %>%
mutate(p_rank = rank(-score)) %>%
select(product, p_rank)
# Item similarity
rank_3 <- product_based_recommendations(customer,
product_similarities,
t(wide_customer_products_matrix)) %>%
mutate(p_rank = rank(-score)) %>%
select(product, p_rank)
# Matrix factorization
rank_4 <- data.frame(score = predicted_ratings[customer,]) %>%
rownames_to_column("product") %>%
mutate(p_rank = rank(-score)) %>%
select(product, p_rank)
# Combination of methods
customer_recs <- inner_join(inner_join(inner_join(rank_1, rank_2, by = "product"), rank_3, by = "product"), rank_4, by = "product") %>%
mutate(overall = p_rank.x + p_rank.y + p_rank.x.x + p_rank.y.y) %>%
select(product, overall) %>%
mutate(p_rank = rank(overall)) %>%
select(product, p_rank) %>%
arrange(p_rank)
return(customer_recs)
}
suppressWarnings(ensemble_recommender("889",
context_similarities = cs_2_indexedBy1,
no_context_similarities = customer_similarities1,
product_similarities = product_similarities1,
wide_customer_products_matrix = customer_products_bought_wide,
predicted_ratings = mf1_predicted))
customer_similarities1
customer_similarities1["411",]
customer_similarities1["889",]
customer_similarities1["a",]
max(customer_similarities1["411",])
customer_similarities1["411",] %>% filter(> 0)
customer_similarities1["411",]
customer_similarities1["411",] %>% data.frame()
customer_similarities1["411",] %>% data.frame() %>% filter(. > 0)
customer_products_bought_wide["411",]
customer_products_bought_wide["411",] %>% data.frame()
customer_products_bought_wide["411",] %>% data.frame() %>% arrange(desc(.))
customer_products_bought_wide["411",] %>% data.frame() %>% rownames_to_column()
customer_products_bought_wide["411",] %>% data.frame() %>% rownames_to_column() %>% arrange(desc(.))
customer_products_bought_wide["889",] %>% data.frame() %>% rownames_to_column() %>% arrange(desc(.)) # only one product with a non-zero
customer_products_bought_wide["39363",] %>% data.frame() %>% rownames_to_column() %>% arrange(desc(.)) # only one product with a non-zero
customer_products_bought_wide["39263",] %>% data.frame() %>% rownames_to_column() %>% arrange(desc(.)) # only one product with a non-zero
customer_products_bought_wide["889",] %>% data.frame() %>% rownames_to_column() %>% arrange(desc(.)) # only one product with a non-zero
cs_2_indexedBy1["411",] %>% data.frame() %>% filter(. > 0) # customer exists and has non-zero similarities to other customers
customer_similarities1["889",] %>% data.frame() %>% rownames_to_column() %>% filter(. > 0) # customer exists and has non-zero similarities to other customers
customer_similarities1["411",] %>% data.frame() %>% rownames_to_column() %>% filter(. > 0) # customer exists and has non-zero similarities to other customers
cs_2_indexedBy1["411",] %>% data.frame() %>% rownames_to_column() %>% filter(. > 0) # customer exists and has non-zero similarities to other customers
mf1_predicted["411",]
mf1_predicted["411",] %>% data.frame() %>% rownames_to_column() %>% filter(. > 0)
customer_products_bought_wide["411",] %>% data.frame() %>% rownames_to_column() %>% arrange(desc(.)) # only one product with a non-zero
product_similarities1["TOP SELLING July Everyday Case",]
product_similarities1["TOP SELLING July Everyday Case",]  %>% data.frame() %>% rownames_to_column() %>% arrange(desc(.))
ensemble_recommender <- function(customer, context_similarities, no_context_similarities, product_similarities, wide_customer_products_matrix, predicted_ratings){
# Convert to character
customer <- ifelse(is.character(customer), customer, as.character(customer))
# Context containing similarity
rank_1 <- customer_based_recommendations(customer,
context_similarities,
wide_customer_products_matrix) %>%
mutate(p_rank = rank(-score)) %>%
select(product, p_rank)
# User bought similarity only
rank_2 <- customer_based_recommendations(customer,
no_context_similarities,
wide_customer_products_matrix) %>%
mutate(p_rank = rank(-score)) %>%
select(product, p_rank)
# Item similarity
rank_3 <- product_based_recommendations(customer,
product_similarities,
t(wide_customer_products_matrix)) %>%
mutate(p_rank = rank(-score)) %>%
select(product, p_rank)
# Matrix factorization
rank_4 <- data.frame(score = predicted_ratings[customer,]) %>%
rownames_to_column("product") %>%
mutate(p_rank = rank(-score)) %>%
select(product, p_rank)
# Combination of methods
customer_recs <- inner_join(inner_join(inner_join(rank_1, rank_2, by = "product"), rank_3, by = "product"), rank_4, by = "product") %>%
mutate(overall = p_rank.x + p_rank.y + p_rank.x.x + p_rank.y.y) %>%
select(product, overall) %>%
mutate(p_rank = rank(overall)) %>%
select(product, p_rank) %>%
arrange(p_rank)
return(customer_recs)
}
suppressWarnings(ensemble_recommender("411",
context_similarities = cs_2_indexedBy1,
no_context_similarities = customer_similarities1,
product_similarities = product_similarities1,
wide_customer_products_matrix = customer_products_bought_wide,
predicted_ratings = mf1_predicted))
debug(ensemble_recommender)
ensemble_recommender("411",
context_similarities = cs_2_indexedBy1,
no_context_similarities = customer_similarities1,
product_similarities = product_similarities1,
wide_customer_products_matrix = customer_products_bought_wide,
predicted_ratings = mf1_predicted)
mf1_predicted[0,head(order(mf1_predicted["411",], decreasing = T))]
undebug(ensemble_recommender)
data.frame(score = mf1_predicted["411",])
data.frame(score = mf1_predicted["411",]) %>%
rownames_to_column("product")
data.frame(score = mf1_predicted["411",]) %>%
rownames_to_column("product") %>%
mutate(p_rank = rank(-score))
data.frame(score = mf1_predicted["411",]) %>%
rownames_to_column("product") %>%
mutate(p_rank = rank(-score)) %>%
select(product, p_rank)
test <- "411"
data.frame(score = mf1_predicted[test,])
data.frame(score = mf1_predicted[test,]) %>%
rownames_to_column("product") %>%
mutate(p_rank = rank(-score)) %>%
select(product, p_rank)
test <- "411"
product_based_recommendations(test,
product_similarities1,
t(customer_products_bought_wide)) %>%
mutate(p_rank = rank(-score)) %>%
select(product, p_rank)
product_based_recommendations(test,
product_similarities1,
t(customer_products_bought_wide))
product_based_recommendations(test,
product_similarities1,
products_customers_wide)
product_based_recommendations("411", product_similarities1, products_customers_wide)
debug(product_based_recommendations)
product_based_recommendations("411", product_similarities1, products_customers_wide)
undebug(product_based_recommendations)
row.names(product_similarities1)[products_customers_wide[,test] == TRUE]
test <- row.names(product_similarities1)[products_customers_wide[,test] == TRUE]
test <- row.names(product_similarities1)[products_customers_wide[,test] == TRUE]
test <- "411"
test <- row.names(product_similarities1)[products_customers_wide[,test] == TRUE]
tibble(product = row.names(product_similarities1),
score = apply(product_similarities1[,test],1,sum),
bought = products_customers_wide[,"411"])
apply(product_similarities1[,test],1,sum)
product_similarities1[,test]
tibble(product = row.names(product_similarities1),
score = apply(data.frame(product_similarities1[,test]),1,sum),
bought = products_customers_wide[,"411"])
tibble(product = row.names(product_similarities1),
score = apply(data.frame(product_similarities1[,test]),1,sum),
bought = products_customers_wide[,"411"]) %>%
arrange(desc(score))
product_based_recommendations <- function(customer, product_similarities, bought_products){
# turn into character if not already
customer <- ifelse(is.character(customer),customer,as.character(customer))
# get scores
customer_bought <- row.names(product_similarities)[bought_products[,customer] == TRUE]
customer_scores <- tibble(product = row.names(product_similarities),
score = apply(data.frame(product_similarities[,customer_bought]),1,sum),
bought = bought_products[,customer])
# sort unseen movies by score and remove the 'seen' column
customer_recom <- customer_scores %>% filter(bought == 0) %>% arrange(desc(score)) %>% select(-bought)
return(customer_recom)
}
product_based_recommendations("411", product_similarities1, products_customers_wide)
# undebug(product_based_recommendations)
# test <- "411"
# test <- row.names(product_similarities1)[products_customers_wide[,test] == TRUE]
# tibble(product = row.names(product_similarities1),
#                         score = apply(data.frame(product_similarities1[,test]),1,sum),
#                         bought = products_customers_wide[,"411"]) %>%
#   arrange(desc(score))
# head(product_based_recommendations("39263", product_similarities1, products_customers_wide)) %in% head(customer_based_recommendations("39263", customer_similarities1, customer_products_bought_wide))
ensemble_recommender <- function(customer, context_similarities, no_context_similarities, product_similarities, wide_customer_products_matrix, predicted_ratings){
# Convert to character
customer <- ifelse(is.character(customer), customer, as.character(customer))
# Context containing similarity
rank_1 <- customer_based_recommendations(customer,
context_similarities,
wide_customer_products_matrix) %>%
mutate(p_rank = rank(-score)) %>%
select(product, p_rank)
# User bought similarity only
rank_2 <- customer_based_recommendations(customer,
no_context_similarities,
wide_customer_products_matrix) %>%
mutate(p_rank = rank(-score)) %>%
select(product, p_rank)
# Item similarity
rank_3 <- product_based_recommendations(customer,
product_similarities,
t(wide_customer_products_matrix)) %>%
mutate(p_rank = rank(-score)) %>%
select(product, p_rank)
# Matrix factorization
rank_4 <- data.frame(score = predicted_ratings[customer,]) %>%
rownames_to_column("product") %>%
mutate(p_rank = rank(-score)) %>%
select(product, p_rank)
# Combination of methods
customer_recs <- inner_join(inner_join(inner_join(rank_1, rank_2, by = "product"), rank_3, by = "product"), rank_4, by = "product") %>%
mutate(overall = p_rank.x + p_rank.y + p_rank.x.x + p_rank.y.y) %>%
select(product, overall) %>%
mutate(p_rank = rank(overall)) %>%
select(product, p_rank) %>%
arrange(p_rank)
return(customer_recs)
}
suppressWarnings(ensemble_recommender("411",
context_similarities = cs_2_indexedBy1,
no_context_similarities = customer_similarities1,
product_similarities = product_similarities1,
wide_customer_products_matrix = customer_products_bought_wide,
predicted_ratings = mf1_predicted))
# debug(ensemble_recommender)
# undebug(ensemble_recommender)
# test <- "411"
# data.frame(score = mf1_predicted[test,]) %>%
#     rownames_to_column("product") %>%
#     mutate(p_rank = rank(-score)) %>%
#     select(product, p_rank)
# test <- "411"
# product_based_recommendations(test,
#                                      product_similarities1,
#                                      t(customer_products_bought_wide)) %>%
#     mutate(p_rank = rank(-score)) %>%
#     select(product, p_rank)
# customer_similarities1["411",] %>% data.frame() %>% rownames_to_column() %>% filter(. > 0) # customer exists and has non-zero similarities to other customers
# customer_products_bought_wide["411",] %>% data.frame() %>% rownames_to_column() %>% arrange(desc(.)) # only one product with a non-zero
# cs_2_indexedBy1["411",] %>% data.frame() %>% rownames_to_column() %>% filter(. > 0) # customer exists and has non-zero similarities to other customers
# mf1_predicted["411",] %>% data.frame() %>% rownames_to_column() %>% filter(. > 0) # customer exists and has non-zero ratings
# customer_products_bought_wide["411",] %>% data.frame() %>% rownames_to_column() %>% arrange(desc(.)) # only one product with a non-zero
# product_similarities1["TOP SELLING July Everyday Case",]  %>% data.frame() %>% rownames_to_column() %>% arrange(desc(.)) # product bought exists and has non-zero similarities to other products
ensemble_recommender <- function(customer, context_similarities, no_context_similarities, product_similarities, wide_customer_products_matrix, predicted_ratings){
# Convert to character
customer <- ifelse(is.character(customer), customer, as.character(customer))
# Context containing similarity
rank_1 <- customer_based_recommendations(customer,
context_similarities,
wide_customer_products_matrix) %>%
mutate(p_rank = rank(-score)) %>%
select(product, p_rank)
# User bought similarity only
rank_2 <- customer_based_recommendations(customer,
no_context_similarities,
wide_customer_products_matrix) %>%
mutate(p_rank = rank(-score)) %>%
select(product, p_rank)
# Item similarity
rank_3 <- product_based_recommendations(customer,
product_similarities,
t(wide_customer_products_matrix)) %>%
mutate(p_rank = rank(-score)) %>%
select(product, p_rank)
# Matrix factorization
rank_4 <- data.frame(score = predicted_ratings[customer,]) %>%
rownames_to_column("product") %>%
mutate(p_rank = rank(-score)) %>%
select(product, p_rank)
# Combination of methods
customer_recs <- inner_join(inner_join(inner_join(rank_1, rank_2, by = "product"), rank_3, by = "product"), rank_4, by = "product") %>%
mutate(overall = p_rank.x + p_rank.y + p_rank.x.x + p_rank.y.y) %>%
select(product, overall) %>%
mutate(p_rank = rank(overall)) %>%
select(product, p_rank) %>%
arrange(p_rank)
return(customer_recs)
}
suppressWarnings(ensemble_recommender("889",
context_similarities = cs_2_indexedBy1,
no_context_similarities = customer_similarities1,
product_similarities = product_similarities1,
wide_customer_products_matrix = customer_products_bought_wide,
predicted_ratings = mf1_predicted))
# debug(ensemble_recommender)
# undebug(ensemble_recommender)
# test <- "411"
# data.frame(score = mf1_predicted[test,]) %>%
#     rownames_to_column("product") %>%
#     mutate(p_rank = rank(-score)) %>%
#     select(product, p_rank)
# test <- "411"
# product_based_recommendations(test,
#                                      product_similarities1,
#                                      t(customer_products_bought_wide)) %>%
#     mutate(p_rank = rank(-score)) %>%
#     select(product, p_rank)
# customer_similarities1["411",] %>% data.frame() %>% rownames_to_column() %>% filter(. > 0) # customer exists and has non-zero similarities to other customers
# customer_products_bought_wide["411",] %>% data.frame() %>% rownames_to_column() %>% arrange(desc(.)) # only one product with a non-zero
# cs_2_indexedBy1["411",] %>% data.frame() %>% rownames_to_column() %>% filter(. > 0) # customer exists and has non-zero similarities to other customers
# mf1_predicted["411",] %>% data.frame() %>% rownames_to_column() %>% filter(. > 0) # customer exists and has non-zero ratings
# customer_products_bought_wide["411",] %>% data.frame() %>% rownames_to_column() %>% arrange(desc(.)) # only one product with a non-zero
# product_similarities1["TOP SELLING July Everyday Case",]  %>% data.frame() %>% rownames_to_column() %>% arrange(desc(.)) # product bought exists and has non-zero similarities to other products
ensemble_recommender <- function(customer, context_similarities, no_context_similarities, product_similarities, wide_customer_products_matrix, predicted_ratings){
# Convert to character
customer <- ifelse(is.character(customer), customer, as.character(customer))
# Context containing similarity
rank_1 <- customer_based_recommendations(customer,
context_similarities,
wide_customer_products_matrix) %>%
mutate(p_rank = rank(-score)) %>%
select(product, p_rank)
# User bought similarity only
rank_2 <- customer_based_recommendations(customer,
no_context_similarities,
wide_customer_products_matrix) %>%
mutate(p_rank = rank(-score)) %>%
select(product, p_rank)
# Item similarity
rank_3 <- product_based_recommendations(customer,
product_similarities,
t(wide_customer_products_matrix)) %>%
mutate(p_rank = rank(-score)) %>%
select(product, p_rank)
# Matrix factorization
rank_4 <- data.frame(score = predicted_ratings[customer,]) %>%
rownames_to_column("product") %>%
mutate(p_rank = rank(-score)) %>%
select(product, p_rank)
# Combination of methods
customer_recs <- inner_join(inner_join(inner_join(rank_1, rank_2, by = "product"), rank_3, by = "product"), rank_4, by = "product") %>%
mutate(overall = p_rank.x + p_rank.y + p_rank.x.x + p_rank.y.y) %>%
select(product, overall) %>%
mutate(p_rank = rank(overall)) %>%
select(product, p_rank) %>%
arrange(p_rank)
return(customer_recs)
}
suppressWarnings(ensemble_recommender("899",
context_similarities = cs_2_indexedBy1,
no_context_similarities = customer_similarities1,
product_similarities = product_similarities1,
wide_customer_products_matrix = customer_products_bought_wide,
predicted_ratings = mf1_predicted))
ensemble_recommender <- function(customer, context_similarities, no_context_similarities, product_similarities, wide_customer_products_matrix, predicted_ratings){
# Convert to character
customer <- ifelse(is.character(customer), customer, as.character(customer))
# Context containing similarity
rank_1 <- customer_based_recommendations(customer,
context_similarities,
wide_customer_products_matrix) %>%
mutate(p_rank = rank(-score)) %>%
select(product, p_rank)
# User bought similarity only
rank_2 <- customer_based_recommendations(customer,
no_context_similarities,
wide_customer_products_matrix) %>%
mutate(p_rank = rank(-score)) %>%
select(product, p_rank)
# Item similarity
rank_3 <- product_based_recommendations(customer,
product_similarities,
t(wide_customer_products_matrix)) %>%
mutate(p_rank = rank(-score)) %>%
select(product, p_rank)
# Matrix factorization
rank_4 <- data.frame(score = predicted_ratings[customer,]) %>%
rownames_to_column("product") %>%
mutate(p_rank = rank(-score)) %>%
select(product, p_rank)
# Combination of methods
customer_recs <- inner_join(inner_join(inner_join(rank_1, rank_2, by = "product"), rank_3, by = "product"), rank_4, by = "product") %>%
mutate(overall = p_rank.x + p_rank.y + p_rank.x.x + p_rank.y.y) %>%
select(product, overall) %>%
mutate(p_rank = rank(overall)) %>%
select(product, p_rank) %>%
arrange(p_rank)
return(customer_recs)
}
suppressWarnings(ensemble_recommender("624",
context_similarities = cs_2_indexedBy1,
no_context_similarities = customer_similarities1,
product_similarities = product_similarities1,
wide_customer_products_matrix = customer_products_bought_wide,
predicted_ratings = mf1_predicted))
# debug(ensemble_recommender)
# undebug(ensemble_recommender)
# test <- "411"
# data.frame(score = mf1_predicted[test,]) %>%
#     rownames_to_column("product") %>%
#     mutate(p_rank = rank(-score)) %>%
#     select(product, p_rank)
# test <- "411"
# product_based_recommendations(test,
#                                      product_similarities1,
#                                      t(customer_products_bought_wide)) %>%
#     mutate(p_rank = rank(-score)) %>%
#     select(product, p_rank)
# customer_similarities1["411",] %>% data.frame() %>% rownames_to_column() %>% filter(. > 0) # customer exists and has non-zero similarities to other customers
# customer_products_bought_wide["411",] %>% data.frame() %>% rownames_to_column() %>% arrange(desc(.)) # only one product with a non-zero
# cs_2_indexedBy1["411",] %>% data.frame() %>% rownames_to_column() %>% filter(. > 0) # customer exists and has non-zero similarities to other customers
# mf1_predicted["411",] %>% data.frame() %>% rownames_to_column() %>% filter(. > 0) # customer exists and has non-zero ratings
# customer_products_bought_wide["411",] %>% data.frame() %>% rownames_to_column() %>% arrange(desc(.)) # only one product with a non-zero
# product_similarities1["TOP SELLING July Everyday Case",]  %>% data.frame() %>% rownames_to_column() %>% arrange(desc(.)) # product bought exists and has non-zero similarities to other products
