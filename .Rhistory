products_quantity * 12, products_quantity)) %>%
mutate(products_quantity = ifelse(str_detect(products_name, "Assorted"),
products_quantity * 12, products_quantity)) %>%
mutate(products_quantity = ifelse(str_detect(products_name, "Budget White"),
products_quantity * 12, products_quantity)) %>%
mutate(products_quantity = ifelse(str_detect(products_name, "30 bottles"),
products_quantity * 30, products_quantity)) %>%
mutate(products_quantity = ifelse(str_detect(products_name, "Voucher"),
products_quantity * 6, products_quantity))
# number of orders
customers <- orders %>%
count(customers_id) %>%
right_join(customers)
colnames(customers)[colnames(customers) == "n"] <- "order_count"
# age and age group
customers <- customers %>%
mutate(customers_dob = parse_date_time(customers_dob, "%Y-%m-%d H:%M:%S")) %>%
mutate(customer_age =  as.period(interval(customers_dob, ymd("20170824")))) %>%
mutate(customer_age_group = ifelse(customer_age >= years(60), "old", ifelse(customer_age >= years(35), "mid", "young"))) %>%
mutate(customer_age_group = as.factor(customer_age_group))
# avg. per bottle
customer_item_prices <- left_join(orders, order_items) %>%
mutate(total_paid = products_price * products_quantity) %>%
group_by(customers_id) %>%
summarise("order_amount" = sum(total_paid), "item_count" = sum(products_quantity)) %>%
mutate(avg_item = order_amount / item_count)
customers <- customer_item_prices %>%
select(customers_id, avg_item) %>%
right_join(customers)
customers <- customers %>%
mutate(customer_price_group = ifelse(avg_item >= 500, "luxury",
ifelse(avg_item >= 150, "premium",
ifelse(avg_item >= 50, "economy",
"budget")))) %>%
mutate(customer_price_group = as.factor(customer_price_group))
# Add in country and payment method
customers <- customers %>%
left_join(orders) %>%
select(-c(date_purchased, orders_id, order_total)) %>%
distinct(customers_id, .keep_all = T)
# Order count class
customers <- customers %>%
mutate(order_freq = ifelse(order_count >= 3, "frequent",
ifelse(order_count >= 2, "twice",
"once"))) %>%
mutate(order_freq = as.factor(order_freq))
# justify choosing "41777" for a top customers
order_items %>%
right_join(orders, by = "orders_id") %>%
count(customers_id) %>%
arrange(desc(n)) %>%
head(5) %>%
knitr::kable(caption = "5 customers with highest variety of products bought")
# justify choosings "411" for a bottom customer
order_items %>%
right_join(orders, by = "orders_id") %>%
count(customers_id) %>%
arrange(n) %>%
head() %>%
knitr::kable(caption = "5 customers with lowest variety of products bought")
knitr::opts_chunk$set(echo = TRUE)
# get matrix of "bought wines" i.e. customer_id as rows and wines as columns
customer_products_bought_tall <- order_items %>%
select(orders_id, products_name) %>%
inner_join(orders %>% select(customers_id, orders_id)) %>% # use inner join to avoid customers without purchases?
select(customers_id, products_name) %>%
unique() %>%
mutate(bought = 1)
customer_products_bought_wide <- customer_products_bought_tall %>%
complete(customers_id, products_name, fill = list(bought = 0)) %>%
spread(key = products_name, value = bought)
# convert data to matrix form
sorted_customers_id <- as.character(unlist(customer_products_bought_wide[,1]))
customer_products_bought_wide <- as.matrix(customer_products_bought_wide[,-1])
row.names(customer_products_bought_wide) <- sorted_customers_id
customer_similarities1 <- readRDS("output/customer_similarities1.rds")
knitr::kable(head(customer_based_recommendations("41777", customer_similarities1, customer_products_bought_wide)),
caption = "User-based collaborative filtering for customer 41777")
customer_based_recommendations <- function(customer, customer_similarities, bought_wines){
# turn into character if not already
customer <- ifelse(is.character(customer),customer,as.character(customer))
# get scores
customer_scores <- data.frame(product = colnames(bought_wines),
score = as.vector(customer_similarities[customer,] %*% bought_wines),
bought = bought_wines[customer,])
# sort unseen movies by score and remove the 'seen' column
customer_recom <- customer_scores %>%
filter(bought == 0) %>%
arrange(desc(score)) %>%
select(-bought)
return(customer_recom)
}
knitr::kable(head(customer_based_recommendations("41777", customer_similarities1, customer_products_bought_wide)),
caption = "User-based collaborative filtering for customer 41777")
knitr::kable(head(customer_based_recommendations("411", customer_similarities1, customer_products_bought_wide)),
caption = "User-based collaborative filtering for customer 411")
products_customers_wide <- t(customer_products_bought_wide)
product_similarities1 <- readRDS("output/product_similarities1.rds")
product_based_recommendations <- function(customer, product_similarities, bought_products){
# turn into character if not already
customer <- ifelse(is.character(customer),customer,as.character(customer))
# get scores
customer_bought <- row.names(product_similarities)[bought_products[,customer] == TRUE]
customer_scores <- tibble(product = row.names(product_similarities),
score = apply(data.frame(product_similarities[,customer_bought]),1,sum),
bought = bought_products[,customer])
# sort unseen movies by score and remove the 'seen' column
customer_recom <- customer_scores %>% filter(bought == 0) %>% arrange(desc(score)) %>% select(-bought)
return(customer_recom)
}
knitr::kable(head(product_based_recommendations("41777", product_similarities1, products_customers_wide)),
caption = "Item-based recommendation for customer 41777")
knitr::kable(head(customer_based_recommendations("41777", customer_similarities1, customer_products_bought_wide)),
caption = "User-based collaborative filtering for customer 41777")
knitr::kable(head(product_based_recommendations("41777", product_similarities1, products_customers_wide)),
caption = "Item-based recommendation for customer 41777")
knitr::kable(head(product_based_recommendations("411", product_similarities1, products_customers_wide)),
caption = "Item-based recommendation for customer 411")
knitr::kable(head(customer_based_recommendations("411", customer_similarities1, customer_products_bought_wide)),
caption = "User-based collaborative filtering for customer 411")
library(NNLM)
# ranks to consider
ranks <- c(1, 2, 3, 4, 5, 10, 20, 50, 100, 200)
mf_acc <- NULL
mf_test_acc <- NULL
# create train and test data
set.seed(1)
pr_sample_ind <- sample(length(product_ratings), ceiling(0.2*length(product_ratings)))
product_ratings <- order_items %>%
mutate(log_order_val = log(products_quantity * products_price)) %>% # create ratings proxy
inner_join(orders) %>%
select(customers_id, products_name, log_order_val) %>%
group_by(customers_id, products_name) %>%
summarise(rating_proxy = mean(log_order_val)) %>%
ungroup() %>%
# complete(customers_id, products_name, fill = list(ratings_proxy = NA))
complete(customers_id, products_name) %>%
spread(key = products_name, value = rating_proxy)
products_list <- as.character(unlist(product_ratings[,1]))
product_ratings <- as.matrix(product_ratings[,-1])
row.names(product_ratings) <- products_list
library(NNLM)
# ranks to consider
ranks <- c(1, 2, 3, 4, 5, 10, 20, 50, 100, 200)
mf_acc <- NULL
mf_test_acc <- NULL
# create train and test data
set.seed(1)
pr_sample_ind <- sample(length(product_ratings), ceiling(0.2*length(product_ratings)))
pr_train <- cbind(product_ratings)
pr_train[pr_sample_ind] <- NA
pr_test <- cbind(product_ratings)
pr_test[-pr_sample_ind] <- NA
check_matrix <- matrix(rep(mean(pr_train, na.rm = T), length(pr_test)), dim(pr_test)[1], dim(pr_test)[2])
check_errors <- (check_matrix - pr_test)^2
check_accuracy <- sqrt(mean(check_errors[!is.na(pr_test)]))
check_accuracy
rank_test_results <- readRDS("output/rank_test_results.rds")
ggplot(rank_test_results) +
geom_line(aes(x = Rank, y = Train_acc, color = "Train")) +
geom_line(aes(x = Rank, y = Test_acc, color = "Test")) +
geom_vline(aes(xintercept = 1), linetype = 2) +
# scale_color_manual(values = c("Train", "Test"))
scale_color_discrete("Accuracy") +
theme_light()
sum(is.na(product_ratings)) / length(product_ratings)
rank_test_results <- readRDS("output/rank_test_results.rds")
ggplot(rank_test_results) +
geom_line(aes(x = Rank, y = Train_acc, color = "Train")) +
geom_line(aes(x = Rank, y = Test_acc, color = "Test")) +
geom_vline(aes(xintercept = 1), linetype = 2) +
# scale_color_manual(values = c("Train", "Test"))
scale_color_discrete("Accuracy") +
ylab("Mean squared-error") +
theme_light()
mf1_predicted <- mf1_decomp$W %*% mf1_decomp$H
mf1_decomp <- readRDS("models/mf1_decomp.rds")
mf1_predicted <- mf1_decomp$W %*% mf1_decomp$H
mf1_predicted[0,head(order(mf1_predicted["411",], decreasing = T))]
mf1_predicted[0,head(order(mf1_decomp$H, decreasing = T))]
mf1_predicted[0,head(order(mf1_predicted["41777",], decreasing = T))]
list(mf1_predicted[0,head(order(mf1_predicted["41777",], decreasing = T))])
c(mf1_predicted[0,head(order(mf1_predicted["41777",], decreasing = T))])
knitr::kable(mf1_predicted[0,head(order(mf1_predicted["41777",], decreasing = T))])
knitr::kable(t(mf1_predicted[0,head(order(mf1_predicted["41777",], decreasing = T))]))
t(mf1_predicted[0,head(order(mf1_predicted["41777",], decreasing = T))])
customer_similarities2 <- readRDS("output/customer_similarities2.rds")
knitr::kable(head(customer_based_recommendations("41777",
customer_similarities1,
customer_products_bought_wide)),
caption = "Recommendations for customer 41777")
customer_similarities2 <- readRDS("output/customer_similarities2.rds")
#ensure that similarity matrix is the same size as original
cs_2_indexedBy1 <- customer_similarities2[row.names(customer_similarities1),colnames(customer_similarities1)]
knitr::kable(head(customer_based_recommendations("41777",
cs_2_indexedBy1,
customer_products_bought_wide)),
caption = "Recommendations for customer 41777")
knitr::kable(head(customer_based_recommendations("411",
cs_2_indexedBy1,
customer_products_bought_wide)),
caption = "Recommendations for customer 411")
knitr::kable(head(customer_based_recommendations("411",
cs_2_indexedBy1,
customer_products_bought_wide)),
caption = "Recommendations for customer 411")
ensemble_recommender <- function(customer, context_similarities, no_context_similarities, product_similarities, wide_customer_products_matrix, predicted_ratings){
# Convert to character
customer <- ifelse(is.character(customer), customer, as.character(customer))
# Context containing similarity
rank_1 <- customer_based_recommendations(customer,
context_similarities,
wide_customer_products_matrix) %>%
mutate(p_rank = rank(-score)) %>%
select(product, p_rank)
# User bought similarity only
rank_2 <- customer_based_recommendations(customer,
no_context_similarities,
wide_customer_products_matrix) %>%
mutate(p_rank = rank(-score)) %>%
select(product, p_rank)
# Item similarity
rank_3 <- product_based_recommendations(customer,
product_similarities,
t(wide_customer_products_matrix)) %>%
mutate(p_rank = rank(-score)) %>%
select(product, p_rank)
# Matrix factorization
rank_4 <- data.frame(score = predicted_ratings[customer,]) %>%
rownames_to_column("product") %>%
mutate(p_rank = rank(-score)) %>%
select(product, p_rank)
# Combination of methods
customer_recs <- inner_join(inner_join(inner_join(rank_1, rank_2, by = "product"), rank_3, by = "product"), rank_4, by = "product") %>%
mutate(overall = p_rank.x + p_rank.y + p_rank.x.x + p_rank.y.y) %>%
select(product, overall) %>%
mutate(p_rank = rank(overall)) %>%
select(product, p_rank) %>%
arrange(p_rank)
return(customer_recs)
}
head(suppressWarnings(ensemble_recommender("411",
context_similarities = cs_2_indexedBy1,
no_context_similarities = customer_similarities1,
product_similarities = product_similarities1,
wide_customer_products_matrix = customer_products_bought_wide,
predicted_ratings = mf1_predicted)))
head(suppressWarnings(ensemble_recommender("41777",
context_similarities = cs_2_indexedBy1,
no_context_similarities = customer_similarities1,
product_similarities = product_similarities1,
wide_customer_products_matrix = customer_products_bought_wide,
predicted_ratings = mf1_predicted)))
head(suppressWarnings(ensemble_recommender("41777",
context_similarities = cs_2_indexedBy1,
no_context_similarities = customer_similarities1,
product_similarities = product_similarities1,
wide_customer_products_matrix = customer_products_bought_wide,
predicted_ratings = mf1_predicted)))
knitr::kable(head(product_based_recommendations("41777", product_similarities1, products_customers_wide)),
caption = "Item-based recommendation for customer 41777")
t(mf1_predicted[0,head(order(mf1_predicted["41777",], decreasing = T))])
knitr::kable(head(customer_based_recommendations("41777",
cs_2_indexedBy1,
customer_products_bought_wide)),
caption = "Recommendations for customer 41777")
knitr::kable(head(suppressWarnings(ensemble_recommender("411",
context_similarities = cs_2_indexedBy1,
no_context_similarities = customer_similarities1,
product_similarities = product_similarities1,
wide_customer_products_matrix = customer_products_bought_wide,
predicted_ratings = mf1_predicted))),
caption = "Recommendations for customer 411")
knitr::kable(head(suppressWarnings(ensemble_recommender("411",
context_similarities = cs_2_indexedBy1,
no_context_similarities = customer_similarities1,
product_similarities = product_similarities1,
wide_customer_products_matrix = customer_products_bought_wide,
predicted_ratings = mf1_predicted)),10),
caption = "Recommendations for customer 411")
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
suppressWarnings(suppressMessages(library(data.table)))
suppressWarnings(suppressMessages(library(tidyverse)))
suppressWarnings(suppressMessages(library(lubridate)))
suppressWarnings(suppressMessages(library(stringr)))
orders_orig <- data.frame(fread("data/orders.csv", header = T))
order_items <- data.frame(fread("data/order-items.csv", header = T))
# create customers data frame with all static customer data
customers <- orders_orig %>%
select(customers_id, customers_gender, customers_dob) %>%
unique() %>%
mutate(customers_id = as.numeric(customers_id)) %>%
arrange(customers_id)
# create orders data frame without static customer data
orders <- orders_orig %>%
select(-c(customers_gender, customers_dob)) %>%
unique() %>%
mutate(customers_id = as.numeric(customers_id)) %>%
arrange(customers_id)
order_items <- order_items %>%
mutate(products_price = as.numeric(products_price)) %>%
mutate(products_quantity = as.numeric(products_quantity)) %>%
filter(products_price > 0) %>%
mutate(products_quantity = ifelse(str_detect(products_name, "case|CASE|Case") & !str_detect(products_name, "6 bottles"),
products_quantity * 12, products_quantity)) %>%
mutate(products_quantity = ifelse(str_detect(products_name, "case|CASE|Case") & str_detect(products_name, "6 bottles"),
products_quantity * 6, products_quantity)) %>%
mutate(products_quantity = ifelse(str_detect(products_name, "12 Assorted"),
products_quantity * 12, products_quantity)) %>%
mutate(products_quantity = ifelse(str_detect(products_name, "Assorted"),
products_quantity * 12, products_quantity)) %>%
mutate(products_quantity = ifelse(str_detect(products_name, "Budget White"),
products_quantity * 12, products_quantity)) %>%
mutate(products_quantity = ifelse(str_detect(products_name, "30 bottles"),
products_quantity * 30, products_quantity)) %>%
mutate(products_quantity = ifelse(str_detect(products_name, "Voucher"),
products_quantity * 6, products_quantity))
# number of orders
customers <- orders %>%
count(customers_id) %>%
right_join(customers)
colnames(customers)[colnames(customers) == "n"] <- "order_count"
# age and age group
customers <- customers %>%
mutate(customers_dob = parse_date_time(customers_dob, "%Y-%m-%d H:%M:%S")) %>%
mutate(customer_age =  as.period(interval(customers_dob, ymd("20170824")))) %>%
mutate(customer_age_group = ifelse(customer_age >= years(60), "old", ifelse(customer_age >= years(35), "mid", "young"))) %>%
mutate(customer_age_group = as.factor(customer_age_group))
# avg. per bottle
customer_item_prices <- left_join(orders, order_items) %>%
mutate(total_paid = products_price * products_quantity) %>%
group_by(customers_id) %>%
summarise("order_amount" = sum(total_paid), "item_count" = sum(products_quantity)) %>%
mutate(avg_item = order_amount / item_count)
customers <- customer_item_prices %>%
select(customers_id, avg_item) %>%
right_join(customers)
customers <- customers %>%
mutate(customer_price_group = ifelse(avg_item >= 500, "luxury",
ifelse(avg_item >= 150, "premium",
ifelse(avg_item >= 50, "economy",
"budget")))) %>%
mutate(customer_price_group = as.factor(customer_price_group))
# Add in country and payment method
customers <- customers %>%
left_join(orders) %>%
select(-c(date_purchased, orders_id, order_total)) %>%
distinct(customers_id, .keep_all = T)
# Order count class
customers <- customers %>%
mutate(order_freq = ifelse(order_count >= 3, "frequent",
ifelse(order_count >= 2, "twice",
"once"))) %>%
mutate(order_freq = as.factor(order_freq))
# justify choosing "41777" for a top customers
order_items %>%
right_join(orders, by = "orders_id") %>%
count(customers_id) %>%
arrange(desc(n)) %>%
head(5) %>%
knitr::kable(caption = "5 customers with highest variety of products bought")
# justify choosings "411" for a bottom customer
order_items %>%
right_join(orders, by = "orders_id") %>%
count(customers_id) %>%
arrange(n) %>%
head() %>%
knitr::kable(caption = "5 customers with lowest variety of products bought")
# get matrix of "bought wines" i.e. customer_id as rows and wines as columns
customer_products_bought_tall <- order_items %>%
select(orders_id, products_name) %>%
inner_join(orders %>% select(customers_id, orders_id)) %>% # use inner join to avoid customers without purchases?
select(customers_id, products_name) %>%
unique() %>%
mutate(bought = 1)
customer_products_bought_wide <- customer_products_bought_tall %>%
complete(customers_id, products_name, fill = list(bought = 0)) %>%
spread(key = products_name, value = bought)
# convert data to matrix form
sorted_customers_id <- as.character(unlist(customer_products_bought_wide[,1]))
customer_products_bought_wide <- as.matrix(customer_products_bought_wide[,-1])
row.names(customer_products_bought_wide) <- sorted_customers_id
customer_similarities1 <- readRDS("output/customer_similarities1.rds")
customer_based_recommendations <- function(customer, customer_similarities, bought_wines){
# turn into character if not already
customer <- ifelse(is.character(customer),customer,as.character(customer))
# get scores
customer_scores <- data.frame(product = colnames(bought_wines),
score = as.vector(customer_similarities[customer,] %*% bought_wines),
bought = bought_wines[customer,])
# sort unseen movies by score and remove the 'seen' column
customer_recom <- customer_scores %>%
filter(bought == 0) %>%
arrange(desc(score)) %>%
select(-bought)
return(customer_recom)
}
knitr::kable(head(customer_based_recommendations("41777", customer_similarities1, customer_products_bought_wide)),
caption = "User-based collaborative filtering for customer 41777")
knitr::kable(head(customer_based_recommendations("411", customer_similarities1, customer_products_bought_wide)),
caption = "User-based collaborative filtering for customer 411")
products_customers_wide <- t(customer_products_bought_wide)
product_similarities1 <- readRDS("output/product_similarities1.rds")
product_based_recommendations <- function(customer, product_similarities, bought_products){
# turn into character if not already
customer <- ifelse(is.character(customer),customer,as.character(customer))
# get scores
customer_bought <- row.names(product_similarities)[bought_products[,customer] == TRUE]
customer_scores <- tibble(product = row.names(product_similarities),
score = apply(data.frame(product_similarities[,customer_bought]),1,sum),
bought = bought_products[,customer])
# sort unseen movies by score and remove the 'seen' column
customer_recom <- customer_scores %>% filter(bought == 0) %>% arrange(desc(score)) %>% select(-bought)
return(customer_recom)
}
product_ratings <- order_items %>%
mutate(log_order_val = log(products_quantity * products_price)) %>% # create ratings proxy
inner_join(orders) %>%
select(customers_id, products_name, log_order_val) %>%
group_by(customers_id, products_name) %>%
summarise(rating_proxy = mean(log_order_val)) %>%
ungroup() %>%
# complete(customers_id, products_name, fill = list(ratings_proxy = NA))
complete(customers_id, products_name) %>%
spread(key = products_name, value = rating_proxy)
products_list <- as.character(unlist(product_ratings[,1]))
product_ratings <- as.matrix(product_ratings[,-1])
row.names(product_ratings) <- products_list
library(NNLM)
# ranks to consider
# ranks <- c(1, 2, 3, 4, 5, 10, 20, 50, 100, 200)
ranks <- c(1, 2, 3)
mf_acc <- NULL
mf_test_acc <- NULL
# create train and test data
set.seed(1)
pr_sample_ind <- sample(length(product_ratings), ceiling(0.2*length(product_ratings)))
pr_train <- cbind(product_ratings)
pr_train[pr_sample_ind] <- NA
pr_test <- cbind(product_ratings)
pr_test[-pr_sample_ind] <- NA
library(NNLM)
# ranks to consider
ranks <- c(1, 2, 3, 4, 5, 10, 20, 50, 100, 200)
# ranks <- c(1, 2, 3) # for testing
mf_acc <- NULL
mf_test_acc <- NULL
# create train and test data
set.seed(1)
pr_sample_ind <- sample(length(product_ratings), ceiling(0.2*length(product_ratings)))
pr_train <- cbind(product_ratings)
pr_train[pr_sample_ind] <- NA
pr_test <- cbind(product_ratings)
pr_test[-pr_sample_ind] <- NA
rank_test_results <- readRDS("output/rank_test_results.rds")
ggplot(rank_test_results) +
geom_line(aes(x = Rank, y = Train_acc, color = "Train")) +
geom_line(aes(x = Rank, y = Test_acc, color = "Test")) +
geom_vline(aes(xintercept = 1), linetype = 2) +
# scale_color_manual(values = c("Train", "Test"))
scale_color_discrete("Accuracy") +
ylab("Mean squared-error") +
geom_hline(yintercept = check_accuracy, linetype = 2) +
theme_light()
check_matrix <- matrix(rep(mean(pr_train, na.rm = T), length(pr_test)), dim(pr_test)[1], dim(pr_test)[2])
check_errors <- (check_matrix - pr_test)^2
check_accuracy <- sqrt(mean(check_errors[!is.na(pr_test)]))
check_accuracy
rank_test_results <- readRDS("output/rank_test_results.rds")
ggplot(rank_test_results) +
geom_line(aes(x = Rank, y = Train_acc, color = "Train")) +
geom_line(aes(x = Rank, y = Test_acc, color = "Test")) +
geom_vline(aes(xintercept = 1), linetype = 2) +
# scale_color_manual(values = c("Train", "Test"))
scale_color_discrete("Accuracy") +
ylab("Mean squared-error") +
geom_hline(yintercept = check_accuracy, linetype = 2) +
theme_light()
rank_test_results <- readRDS("output/rank_test_results.rds")
ggplot(rank_test_results) +
geom_line(aes(x = Rank, y = Train_acc, color = "Train")) +
geom_line(aes(x = Rank, y = Test_acc, color = "Test")) +
geom_vline(aes(xintercept = 1), linetype = 2) +
# scale_color_manual(values = c("Train", "Test"))
scale_color_discrete("Accuracy") +
ylab("Mean squared-error") +
geom_hline(yintercept = check_accuracy, linetype = 3) +
theme_light()
?geom_text
rank_test_results <- readRDS("output/rank_test_results.rds")
ggplot(rank_test_results) +
geom_line(aes(x = Rank, y = Train_acc, color = "Train")) +
geom_line(aes(x = Rank, y = Test_acc, color = "Test")) +
geom_vline(aes(xintercept = 1), linetype = 2) +
# scale_color_manual(values = c("Train", "Test"))
scale_color_discrete("Accuracy") +
ylab("Mean squared-error") +
geom_hline(yintercept = check_accuracy, linetype = 3) +
annotate("text", label = "Baseline accuracy", x = 50, y = 1.1) +
theme_light()
rank_test_results <- readRDS("output/rank_test_results.rds")
ggplot(rank_test_results) +
geom_line(aes(x = Rank, y = Train_acc, color = "Train")) +
geom_line(aes(x = Rank, y = Test_acc, color = "Test")) +
geom_vline(aes(xintercept = 1), linetype = 2) +
# scale_color_manual(values = c("Train", "Test"))
scale_color_discrete("Accuracy") +
ylab("Mean squared-error") +
geom_hline(yintercept = check_accuracy, linetype = 3) +
annotate("text", label = "Baseline accuracy", x = 50, y = 1.2) +
theme_light()
